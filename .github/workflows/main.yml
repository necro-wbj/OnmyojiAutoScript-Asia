name: Auto Sync Upstream Dev (PR-only, manual conflict resolution)

on:
  schedule:
    - cron: "*/5 * * * *"   # GitHub Actions ÊúÄÁü≠ 5 ÂàÜÈêò‰∏ÄÊ¨°
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"
      - ".sync/**"          # ‚¨ÖÔ∏è ÈÅøÂÖçÁ¥î .sync ËÆäÊõ¥Ëß∏ÁôºÊú¨ workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git setup
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream & fetch all
        run: |
          set -euo pipefail
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin   +refs/heads/*:refs/remotes/origin/*
          git fetch --prune upstream +refs/heads/*:refs/remotes/upstream/*

      - name: Resolve upstream ref & tip-diff (robust)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if git show-ref --verify --quiet refs/remotes/upstream/dev; then
            UP_REF="upstream/dev"
            REASON="found-upstream-dev"
          else
            echo "::error::No refs/remotes/upstream/dev found. Refusing to fall back to origin/main (to avoid no-op)."
            exit 2
          fi

          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)

          # ÊñπÂêëÔºöorigin/main...UP_REFÔºåÂ∑¶=origin/mainÔºåÂè≥=UP_REF
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')

          {
            echo "up_ref=${UP_REF}"
            echo "reason=${REASON}"
            echo "upstream_tip=${UP_TIP}"
            echo "origin_tip=${ORI_TIP}"
            echo "ahead=${AHEAD}"
            echo "behind=${BEHIND}"
          } >> "$GITHUB_OUTPUT"

          echo "[LOG] reason=${REASON}  up_ref=${UP_REF}  up_tip=${UP_TIP}  base_tip=${ORI_TIP}"
          echo "[LOG] rev-list(origin/main...${UP_REF}) BEHIND=${BEHIND} AHEAD=${AHEAD}"

      - name: Early exit if tips identical (no PR update needed)
        if: steps.resolve.outputs.ahead == '0' && steps.resolve.outputs.behind == '0'
        run: echo "[LOG] origin/main Ëàá upstream/dev ÂÆåÂÖ®‰∏ÄËá¥ÔºõË∑≥ÈÅéÊú¨Ê¨°Âü∑Ë°å„ÄÇ"

      # --- ÈóúÈçµÔºöÁî®„ÄåÈè°ÂÉèÂø´ÁÖß„ÄçÊñπÂºèÂª∫Á´ã/Êõ¥Êñ∞ PR branchÔºå‰∏çÂÅö rebase/merge ---
      - name: Mirror upstream/dev to PR branch (no auto-merge)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          PR_BRANCH="sync/upstream-dev"
          git checkout -B "$PR_BRANCH" "${{ steps.resolve.outputs.up_ref }}"
          # Âº∑Âà∂Êõ¥Êñ∞ÈÅ†Á´Ø PR branch Ëàá upstream/dev ÂÆåÂÖ®‰∏ÄËá¥
          git push origin "+$PR_BRANCH:$PR_BRANCH"
          echo "[LOG] Pushed $PR_BRANCH at ${{ steps.resolve.outputs.upstream_tip }} (mirror of ${{ steps.resolve.outputs.up_ref }})"

      - name: Quick diff artifact (preview conflicts)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ci-diff
          # ÈõôÈªûÁúÅÁï•Ë™ûÊ≥ïÔºöÊØîËºÉÂÖ©ÈÇäÂÖ±Á•ñÂÖàÂæåÁöÑÂ∑ÆÁï∞ÔºõÂπ´Âä©Âú® PR ÂâçÂÖàÊ¶ÇË¶Ω
          git diff --name-status origin/main..."${{ steps.resolve.outputs.up_ref }}" > ci-diff/name-status.txt || true
          git diff --stat        origin/main..."${{ steps.resolve.outputs.up_ref }}" > ci-diff/stat.txt || true
          tar czf ci-diff.tgz ci-diff
      - name: Upload diff artifact
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        uses: actions/upload-artifact@v4
        with:
          name: upstream-vs-main-diff
          path: ci-diff.tgz
          retention-days: 7

      # --- ÈÄèÈÅé gh CLI Âª∫Á´ã/Êõ¥Êñ∞ PRÔºà‰∏çÁî¢ÁîüÈ°çÂ§ñ commitÔºâ ---
      - name: Create / Update PR (PR-only; manual resolution)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        id: ghpr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${GITHUB_REPOSITORY}"
          BASE_BRANCH="main"
          PR_BRANCH="sync/upstream-dev"

          TITLE="sync: upstream/dev ‚Üí ${BASE_BRANCH} (manual conflict resolution)"
          BODY=$'This PR mirrors **upstream/dev** into **'"${BASE_BRANCH}"$'**.\n\n'
          BODY+=$'- No auto-rebase/merge performed by CI.\n'
          BODY+=$'- If conflicts appear, please resolve them manually.\n'
          BODY+=$'\n'
          BODY+=$'- reason: `'"${{ steps.resolve.outputs.reason }}"'`\n'
          BODY+=$'- upstream tip: `'"${{ steps.resolve.outputs.upstream_tip }}"'`\n'
          BODY+=$'- origin tip:   `'"${{ steps.resolve.outputs.origin_tip }}"'`\n'
          BODY+=$'- ahead/from main: `'"${{ steps.resolve.outputs.ahead }}"'`, behind: `'"${{ steps.resolve.outputs.behind }}"'`\n'

          # Ê™¢Êü•ÊòØÂê¶Â∑≤ÊúâÂêåÂêëÈñãÂïü‰∏≠ÁöÑ PR
          EXISTING_PR_NUMBER=$(gh pr list \
            --repo "$REPO" \
            --head "$PR_BRANCH" \
            --base "$BASE_BRANCH" \
            --state open \
            --json number \
            --jq '.[0].number // empty' || true)

          if [[ -n "${EXISTING_PR_NUMBER:-}" ]]; then
            gh pr edit "${EXISTING_PR_NUMBER}" --repo "$REPO" \
              --title "$TITLE" --body "$BODY" --add-label "chore,auto-sync"
            echo "pull-request-number=${EXISTING_PR_NUMBER}" >> "$GITHUB_OUTPUT"
            echo "pull-request-url=$(gh pr view ${EXISTING_PR_NUMBER} --repo "$REPO" --json url --jq .url)" >> "$GITHUB_OUTPUT"
            echo "pull-request-operation=updated" >> "$GITHUB_OUTPUT"
            echo "[LOG] Updated existing PR #${EXISTING_PR_NUMBER}"
          else
            # Âª∫Á´ã Draft PRÔºà‰Ω†‰πüÂèØÊää --draft ÊãøÊéâÔºâ
            URL=$(gh pr create \
              --repo "$REPO" \
              --base "$BASE_BRANCH" \
              --head "$PR_BRANCH" \
              --title "$TITLE" \
              --body "$BODY" \
              --draft \
              --label "chore,auto-sync")
            echo "pull-request-url=${URL}" >> "$GITHUB_OUTPUT"
            echo "pull-request-operation=created" >> "$GITHUB_OUTPUT"
            echo "[LOG] Created draft PR: ${URL}"
          fi

      - name: Notify Discord (only on PR create/update)
        if: steps.ghpr.outputs.pull-request-operation && steps.ghpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.ghpr.outputs.pull-request-url }}
          OP: ${{ steps.ghpr.outputs.pull-request-operation }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          üîÑ **Sync upstream/dev ‚Üí main** (${OP})
          PR: ${PR_URL}
          - tip: ${{ steps.resolve.outputs.upstream_tip }}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          ‚ùå **Upstream sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
