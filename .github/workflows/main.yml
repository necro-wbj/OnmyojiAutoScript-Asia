name: Auto sync from upstream/dev to main (overlay rebase)

on:
  schedule:
    - cron: "*/5 * * * *"   # 每 5 分鐘（UTC）
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: auto-rebase-upstream-dev
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      PR_BRANCH: auto-rebase/upstream-dev
      BASE_BRANCH: main

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add upstream & fetch
        run: |
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git || true
          git fetch --all --prune

      # === 早退：若 upstream/dev tip 與上次相同，直接結束 ===
      - name: Get upstream tip
        id: tip
        run: |
          echo "sha=$(git rev-parse upstream/dev)" >> $GITHUB_OUTPUT

      - name: Restore last-processed tip
        id: last
        uses: actions/cache/restore@v4
        with:
          path: .upstream-tip
          key: upstream-tip-${{ steps.tip.outputs.sha }}

      - name: Skip if no change
        if: steps.last.outputs.cache-hit == 'true'
        run: |
          echo "Upstream dev has no new commits; exiting."
          exit 0

      # === 啟用 rerere、註冊 merge driver、設定安全目錄與 Git 身分 ===
      - name: Git config (rerere, merge drivers, identity, safe dir)
        run: |
          git config rerere.enabled true
          git config rerere.autoupdate true
          git config merge.ours.driver true
          git config merge.theirs.driver true
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Restore rerere cache
        uses: actions/cache@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ github.ref_name }}
          restore-keys: |
            rr-cache-

      # === 以 upstream/dev 為基底建立工作分支 ===
      - name: Prepare working branch from upstream/dev
        run: |
          git switch -C "$PR_BRANCH" upstream/dev

      # === 套用 overlay 提交（路徑過濾＋區分：正常/衝突/空補丁） ===
      - name: Cherry-pick overlay commit(s) from main
        run: |
          COMMITS=$(git log --reverse --format=%H upstream/dev..origin/${BASE_BRANCH})
          if [ -z "$COMMITS" ]; then
            echo "NO_OVERLAY=1" >> $GITHUB_ENV
            exit 0
          fi

          ALLOW_PATTERNS='^(src/|tasks/|assets/|i18n/|scripts/|config/)'

          set -e
          for c in $COMMITS; do
            echo "::group::Cherry-picking $c"
            FILES=$(git diff --name-only ${c}^! || true)

            # 只動 CI/文件 且 未碰允許目錄 → 略過
            if echo "$FILES" | grep -Ev "$ALLOW_PATTERNS" | grep -Eq '(^|/)\.github/|(^|/)docs/|^README|^CHANGELOG'; then
              if ! echo "$FILES" | grep -Eq "$ALLOW_PATTERNS"; then
                echo "Skip CI/docs-only commit $c"
                echo "::endgroup::"
                continue
              fi
            fi

            if git cherry-pick -x $c; then
              echo "Applied $c"
              echo "::endgroup::"
              continue
            fi

            if git ls-files -u | grep -q . ; then
              echo "Detected real conflicts while applying $c"
              echo "CONFLICT=1" >> $GITHUB_ENV
              echo "::endgroup::"
              break
            else
              echo "Empty/Already-applied commit $c -> skip"
              git cherry-pick --skip || true
              echo "::endgroup::"
            fi
          done

      - name: Save rerere cache (even on conflict)
        if: always()
        uses: actions/cache@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ github.ref_name }}

      # === 測試（可接入） ===
      - name: Run tests
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        run: |
          echo "Run your tests here"
          # pytest -q || true

      # === 成功：push 分支（若已存在則更新） ===
      - name: Push branch
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        run: |
          git push -u origin "$PR_BRANCH" --force-with-lease

      # === Token 權限預檢（REST）——列出使用者與 repo 權限，方便排錯 ===
      - name: Preflight permissions (REST)
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          echo "Viewer:" 
          curl -sS -H "Authorization: Bearer $TOKEN" https://api.github.com/user | jq '{login, id}'
          echo "Repo permissions:"
          curl -sS -H "Authorization: Bearer $TOKEN" https://api.github.com/repos/$REPO | jq '.permissions'

      # === 開或更新 PR（REST API） ===
      - name: Open or update PR (REST)
        id: pr
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          OWNER="${REPO%/*}"

          # 查是否已有 PR（base=main, head=OWNER:PR_BRANCH）
          EXISTING=$(curl -sS -H "Authorization: Bearer $TOKEN" \
            "https://api.github.com/repos/$REPO/pulls?state=open&base=${BASE_BRANCH}&head=${OWNER}:${PR_BRANCH}" \
            | jq -r '.[0].html_url // empty')

          if [ -n "$EXISTING" ]; then
            echo "url=$EXISTING" >> $GITHUB_OUTPUT
            echo "Found existing PR: $EXISTING"
          else
            DATA=$(jq -n --arg title "chore: Rebase overlay onto latest upstream/dev" \
                        --arg head  "$PR_BRANCH" \
                        --arg base  "$BASE_BRANCH" \
                        --arg body  "自動將 \`${BASE_BRANCH}\` 的 overlay 提交套到最新 \`upstream/dev\`。\n- 使用 .gitattributes & rerere 降低衝突\n- 測試通過即可合併" \
                        '{title:$title, head:$head, base:$base, body:$body}')
            CREATED=$(curl -sS -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
              -d "$DATA" "https://api.github.com/repos/$REPO/pulls")
            URL=$(echo "$CREATED" | jq -r '.html_url // empty')
            if [ -z "$URL" ]; then
              echo "$CREATED"
              echo "Failed to create PR via REST" >&2
              exit 1
            fi
            echo "url=$URL" >> $GITHUB_OUTPUT
            echo "Created PR: $URL"
          fi

      # === 失敗：開 Issue 並列出衝突檔 ===
      - name: Open conflict issue
        if: env.CONFLICT == '1'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## 自動 rebase 發生衝突，需要人工處理" > body.md
          echo "" >> body.md
          echo "**衝突檔案清單：**" >> body.md
          echo "" >> body.md
          echo '```' >> body.md
          git ls-files -u | cut -f2 | sort -u >> body.md || true
          echo '```' >> body.md
          gh issue create \
            --title "Auto rebase 衝突，請協助處理" \
            --body-file body.md \
            --label "auto-rebase" || true

      # === Discord 通知：成功（附連結） ===
      - name: Discord notify success
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PR_URL="${{ steps.pr.outputs.url }}"
          MSG="✅ Auto rebase 成功！\nPR：${PR_URL}\nRun：${RUN_URL}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":\"$MSG\"}" \
               "https://discord.com/api/webhooks/1412622397592305814/dfHIMMiqayaA55ODa2cznyI0enNc2qhpSkG2Hvauvs3gwq0jnSL2osOQaj2kbBBXysiw"

      # === Discord 通知：衝突（附連結與檔名） ===
      - name: Discord notify conflict
        if: env.CONFLICT == '1'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          FILES=$(git ls-files -u | cut -f2 | sort -u | tr '\n' ' ')
          MSG="⚠️ Auto rebase 衝突，需要人工處理。\n衝突檔案: $FILES\nRun：${RUN_URL}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":\"$MSG\"}" \
               "https://discord.com/api/webhooks/1412622397592305814/dfHIMMiqayaA55ODa2cznyI0enNc2qhpSkG2Hvauvs3gwq0jnSL2osOQaj2kbBBXysiw"

       # === 寫入這次處理過的 upstream tip（建立目錄/檔案，供快取保存） ===
      - name: Mark last-processed tip
        if: env.CONFLICT != '1'
        run: |
          mkdir -p .upstream-tip
          echo "${{ steps.tip.outputs.sha }}" > .upstream-tip/sha

      # === 標記本次處理的 upstream tip（供下次早退） ===
      - name: Save last-processed tip
        if: env.CONFLICT != '1'
        uses: actions/cache/save@v4
        with:
          path: .upstream-tip
          key: upstream-tip-${{ steps.tip.outputs.sha }}
