# .github/workflows/auto-sync-upstream-dev.yml
name: Auto Rebase Upstream Dev

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream and fetch
        run: |
          set -e
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin
          git fetch --prune upstream

      - name: Exit early if no changes from upstream
        id: earlycheck
        shell: bash
        run: |
          set -e
          UP_TIP="$(git rev-parse --short upstream/dev)"
          ORI_TIP="$(git rev-parse --short origin/main)"
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main...upstream/dev | awk '{print $1" "$2}')
          echo "upstream_tip=$UP_TIP" >> $GITHUB_OUTPUT
          echo "origin_tip=$ORI_TIP"  >> $GITHUB_OUTPUT
          echo "ahead=$AHEAD"         >> $GITHUB_OUTPUT
          echo "behind=$BEHIND"       >> $GITHUB_OUTPUT
          echo "[LOG] origin/main tip:  $ORI_TIP"
          echo "[LOG] upstream/dev tip: $UP_TIP"
          echo "[LOG] AHEAD=$AHEAD, BEHIND=$BEHIND"
          if git diff --quiet origin/main..upstream/dev; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "[LOG] No changes detected. Exit."
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "[LOG] Changes detected. Continue."
          fi

      # ‚úÖ ÈóúÈçµÊõ¥ÂãïÔºö‰∏çÂú® CI Âêà‰ΩµÔºõÁõ¥Êé•Êää upstream/dev ÂÅöÊàêÂêåÊ≠•ÂàÜÊîØ‰∏¶Êé®‰∏äÂéª
      - name: Publish sync branch from upstream/dev
        if: steps.earlycheck.outputs.no_changes != 'true'
        id: publish
        env:
          PR_BRANCH: auto-rebase/upstream-dev
        run: |
          set -e
          git checkout -B "$PR_BRANCH" upstream/dev
          git push --force origin "$PR_BRANCH"
          echo "result=published" >> $GITHUB_OUTPUT

      - name: Create / Update PR
        if: steps.publish.outputs.result == 'published'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: auto-rebase/upstream-dev   # ‰æÜÊ∫êÂàÜÊîØÔºàÂ∑≤Á∂ìÊé®Â•ΩÔºâ
          base: main
          title: "Auto sync upstream/dev ‚Üí main"
          body: |
            Automated sync from **upstream/dev** to **main**.

            - upstream/dev tip: `${{ steps.earlycheck.outputs.upstream_tip }}`
            - origin/main  tip: `${{ steps.earlycheck.outputs.origin_tip }}`
            - ahead:  `${{ steps.earlycheck.outputs.ahead }}`
            - behind: `${{ steps.earlycheck.outputs.behind }}`
          labels: "chore,auto-sync"
          delete-branch: false

      - name: Notify Discord (PR created/updated)
        if: steps.publish.outputs.result == 'published' && steps.cpr.outputs.pull-request-number != '' && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          REPO: ${{ github.repository }}
          PR_NUM: ${{ steps.cpr.outputs.pull-request-number }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          PR_PATH="${REPO}/pull/${PR_NUM}"
          SUMMARY=$(cat <<EOF
          üîÑ **Auto sync upstream/dev ‚Üí main** (${OP})
          Repo: ${REPO}
          PR: ${PR_URL}
          PR Path: ${PR_PATH}
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$SUMMARY" '{content: $content}')"

      # 8) DiscordÔºöÂêà‰ΩµÂ§±ÊïóÔºàÊúâËÆäÊõ¥‰ΩÜÂ§±ÊïóÊôÇÁôºÔºâÔºå‰∏¶ËÆì job Â§±Êïó
      - name: Notify Discord (merge failed)
        if: steps.merge.outputs.result == 'failed'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          REPO: ${{ github.repository }}
          DETAIL: ${{ steps.merge.outputs.detail }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          MSG=$(cat <<EOF
          ‚ùå **Auto sync upstream/dev ‚Üí main failed (merge)**
          Repo: ${REPO}
          Reason: ${DETAIL}
          Run: ${RUN_URL}
          Hint: Resolve conflicts locally, then push a fix or re-run the workflow.
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      - name: Fail job if merge failed
        if: steps.merge.outputs.result == 'failed'
        run: |
          echo "Merge failed, marking job as failed."
          exit 1
