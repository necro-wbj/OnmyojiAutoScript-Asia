name: Auto Sync Upstream Dev (PR-only, keep history & rerere)

on:
  schedule:
    - cron: "*/5 * * * *"   # 最短 5 分鐘
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"
      - ".sync/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 用 GITHUB_TOKEN 讀，但推送改用 PAT
permissions:
  contents: read
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git setup
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream & fetch all
        run: |
          set -euo pipefail
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin   +refs/heads/*:refs/remotes/origin/*
          git fetch --prune upstream +refs/heads/*:refs/remotes/upstream/*

      - name: Resolve upstream ref & tip-diff
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if git show-ref --verify --quiet refs/remotes/upstream/dev; then
            UP_REF="upstream/dev"
            REASON="found-upstream-dev"
          else
            echo "::error::No refs/remotes/upstream/dev found."
            exit 2
          fi
          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')
          {
            echo "up_ref=${UP_REF}"
            echo "reason=${REASON}"
            echo "upstream_tip=${UP_TIP}"
            echo "origin_tip=${ORI_TIP}"
            echo "ahead=${AHEAD}"
            echo "behind=${BEHIND}"
          } >> "$GITHUB_OUTPUT"
          echo "[LOG] ${REASON}   up_ref=${UP_REF}   up_tip=${UP_TIP}   base_tip=${ORI_TIP}"
          echo "[LOG] diff(origin/main...${UP_REF})   behind=${BEHIND}  ahead=${AHEAD}"

      - name: Early exit if tips identical
        if: steps.resolve.outputs.ahead == '0' && steps.resolve.outputs.behind == '0'
        run: echo "[LOG] origin/main 與 upstream/dev 完全一致；跳過。"

      # --- 用 PAT 來 push（解鎖 workflows 防護） ---
      - name: Configure PAT push URL
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -euo pipefail
          test -n "$GH_PAT"
          git remote set-url --push origin "https://${GITHUB_ACTOR}:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git"
          echo "[LOG] origin push URL configured with PAT."

      # --- 模式 1：完整鏡像上游 → PR（保留上游完整歷史；PR 會顯示衝突） ---
      - name: Mirror upstream/dev to PR branch (history-preserving)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          PR_BRANCH="sync/upstream-dev"
          git checkout -B "$PR_BRANCH" "${{ steps.resolve.outputs.up_ref }}"
          git push origin "+$PR_BRANCH:$PR_BRANCH"
          echo "[LOG] Pushed $PR_BRANCH at ${{ steps.resolve.outputs.upstream_tip }} (mirror of upstream/dev)"

      - name: Quick diff artifact (preview)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ci-diff
          git diff --name-status origin/main..."${{ steps.resolve.outputs.up_ref }}" > ci-diff/name-status.txt || true
          git diff --stat        origin/main..."${{ steps.resolve.outputs.up_ref }}" > ci-diff/stat.txt || true
          tar czf ci-diff.tgz ci-diff
      - name: Upload diff artifact
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        uses: actions/upload-artifact@v4
        with:
          name: upstream-vs-main-diff
          path: ci-diff.tgz
          retention-days: 7

      - name: Create / Update PR (PR-only; manual resolution)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        id: ghpr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${GITHUB_REPOSITORY}"
          BASE_BRANCH="main"
          PR_BRANCH="sync/upstream-dev"

          TITLE="sync: upstream/dev → ${BASE_BRANCH} (manual conflict resolution)"
          BODY=$'This PR mirrors **upstream/dev** into **'"${BASE_BRANCH}"$'**.\n\n'
          BODY+=$'- Uses PAT to allow workflow changes in upstream history.\n'
          BODY+=$'- CI does **not** auto-merge/rebase; please resolve conflicts in PR.\n'
          BODY+=$'\n'
          BODY+=$'- reason: `'"${{ steps.resolve.outputs.reason }}"'`\n'
          BODY+=$'- upstream tip: `'"${{ steps.resolve.outputs.upstream_tip }}"'`\n'
          BODY+=$'- origin tip:   `'"${{ steps.resolve.outputs.origin_tip }}"'`\n'
          BODY+=$'- ahead(from main): `'"${{ steps.resolve.outputs.ahead }}"'`, behind: `'"${{ steps.resolve.outputs.behind }}"'`\n'

          EXISTING_PR_NUMBER=$(gh pr list --repo "$REPO" --head "$PR_BRANCH" --base "$BASE_BRANCH" --state open --json number --jq '.[0].number // empty' || true)
          if [[ -n "${EXISTING_PR_NUMBER:-}" ]]; then
            gh pr edit "${EXISTING_PR_NUMBER}" --repo "$REPO" --title "$TITLE" --body "$BODY" --add-label "chore,auto-sync"
            echo "pull-request-url=$(gh pr view ${EXISTING_PR_NUMBER} --repo "$REPO" --json url --jq .url)" >> "$GITHUB_OUTPUT"
            echo "pull-request-operation=updated" >> "$GITHUB_OUTPUT"
            echo "[LOG] Updated existing PR #${EXISTING_PR_NUMBER}"
          else
            URL=$(gh pr create --repo "$REPO" --base "$BASE_BRANCH" --head "$PR_BRANCH" --title "$TITLE" --body "$BODY" --draft --label "chore,auto-sync")
            echo "pull-request-url=${URL}" >> "$GITHUB_OUTPUT"
            echo "pull-request-operation=created" >> "$GITHUB_OUTPUT"
            echo "[LOG] Created draft PR: ${URL}"
          fi

      # --- 模式 2（附帶）：rebase 預覽分支，保留你的補丁歷史並啟用 rerere（不強制成功） ---
      - name: (Cache) Restore rerere decisions
        uses: actions/cache@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ runner.os }}-${{ github.repository }}-${{ steps.resolve.outputs.upstream_tip }}
          restore-keys: |
            rr-cache-${{ runner.os }}-${{ github.repository }}-

      - name: Rebase our local commits onto upstream (rerere; preview branch)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -euo pipefail
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
          git checkout -B main origin/main
          git switch -c rebase/preview
          git config rerere.enabled true

          # 不要強行解；失敗就讓它 fail，保留 rerere 記錄給下次重放
          if ! git rebase -s ort -X theirs "${UP_REF}"; then
            echo "::warning::Rebase preview hit conflicts (expected for manual resolution)."
          fi

          # 用 PAT 推到遠端，僅作參考（不作自動合併）
          git remote set-url --push origin "https://${GITHUB_ACTOR}:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git"
          git push -f origin rebase/preview

      - name: (Cache) Save rerere decisions
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ runner.os }}-${{ github.repository }}-${{ steps.resolve.outputs.upstream_tip }}

      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          ❌ **Upstream sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
