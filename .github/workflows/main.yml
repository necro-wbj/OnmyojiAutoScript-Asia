name: Auto Rebase Upstream Dev

on:
  schedule:
    - cron: "*/15 * * * *"   # ⏱️ 降低排程頻率（每 15 分），更省資源；要更頻繁自行調整
  workflow_dispatch: {}       # 手動觸發
  push:
    branches: [ main ]        # 只監聽 main，避免 PR 分支 push 造成連鎖觸發
    paths-ignore:             # 文檔或 CI 變更不觸發，減少無謂跑動
      - ".github/**"
      - "docs/**"
      - "README.md"

# 🧠 只允許同一分支同一時間一個 run，新的來就取消舊的（安靜又省資源）
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 🔐 權限最小化：讀 repo、開 PR
permissions:
  contents: read
  pull-requests: write

jobs:
  sync-upstream:
    # 避免 bot 的 push 反過來觸發自己（防自我觸發）
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 20       # 限制最長時間，防卡住浪費 runner
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1      # ⚡ 快：只抓最新 commit
          fetch-tags: false
          submodules: false
          # persist-credentials 預設 true，足夠 create-pull-request 使用

      - name: Setup Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # ⬇️ 請把 <upstream-owner>/<upstream-repo> 與 upstream 分支名稱改成你的實際值
      - name: Add upstream and fetch
        run: |
          set -e
          # 中文註解：新增 upstream 來源，若已存在就忽略錯誤
          git remote add upstream https://github.com/<upstream-owner>/<upstream-repo>.git || true
          # 中文註解：只抓 upstream 的目標分支最新一個 commit（省流量、快）
          git fetch --no-tags --depth=1 upstream dev
          # 中文註解：同步抓一下 origin/main 最新一個 commit
          git fetch --no-tags --depth=1 origin main

      # 💤 沒有差異 → 直接成功結束（安靜）
      - name: Exit early if no changes from upstream
        run: |
          set -e
          # 中文註解：比較 upstream/dev 與 origin/main 是否有差異
          if git diff --quiet origin/main..upstream/dev; then
            echo "No upstream changes. Exiting quietly."
            exit 0
          fi

      # 🧹 用乾淨分支承載同步結果（避免污染 main）
      - name: Prepare update branch
        env:
          PR_BRANCH: auto-rebase/upstream-dev
        run: |
          set -e
          git checkout -B "$PR_BRANCH" origin/main
          # 中文註解：優先嘗試 fast-forward，同步不上就用直線合併（可依你流程改成 rebase）
          git merge --ff-only upstream/dev || git merge --no-edit upstream/dev

      # 📬 透過 PR 交付變更（不直接 push main，風險較低）
      - name: Create / Update PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: auto-rebase/upstream-dev
          title: "Auto sync upstream/dev → main"
          body: "Automated sync from upstream/dev."
          labels: "chore,auto-sync"
          # 中文註解：不自動刪分支，保留給下次覆寫同名分支使用
          delete-branch: false
          # 中文註解：把 PR 指到 main
          base: main
