name: Auto Rebase Upstream Dev (safe PR-only)

on:
  schedule:
    - cron: "*/5 * * * *"   # 每 5 分鐘（原本 "0 * * * *" 是每小時 0 分）
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 只給需要的權限：寫入內容 & 開 PR
permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 建議：checkout 只需要 read 權限，其餘由 GITHUB_TOKEN 控制
          # 參考 actions/checkout 建議權限說明。:contentReference[oaicite:1]{index=1}

      - name: Git setup (identity & safety)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream and fetch
        run: |
          set -euo pipefail
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin
          git fetch --prune upstream

      # 偵測要跟哪個來源同步：優先 upstream/dev，沒有就退回 origin/main
      - name: Resolve upstream ref (dev or origin/main)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          TARGET_BRANCH="dev"
          if git ls-remote --heads upstream "$TARGET_BRANCH" | grep -q "refs/heads/$TARGET_BRANCH"; then
            UP_REF="upstream/${TARGET_BRANCH}"
            REASON="found-branch"
          else
            UP_REF="origin/main"
            REASON="fallback-origin-main"
          fi

          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')

          {
            echo "up_ref=${UP_REF}"
            echo "reason=${REASON}"
            echo "upstream_tip=${UP_TIP}"
            echo "origin_tip=${ORI_TIP}"
            echo "ahead=${AHEAD}"
            echo "behind=${BEHIND}"
          } >> "$GITHUB_OUTPUT"

          echo "[LOG] Using upstream ref: ${UP_REF} (${REASON})"
          echo "[LOG] origin/main tip:  ${ORI_TIP}"
          echo "[LOG] ${UP_REF} tip:     ${UP_TIP}"
          echo "[LOG] AHEAD=${AHEAD}, BEHIND=${BEHIND}"

      - name: Exit early if no changes from upstream (exclude .github)
        id: earlycheck
        shell: bash
        run: |
          set -euo pipefail
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
          if git diff --quiet origin/main.."${UP_REF}" -- . ":(exclude).github" ":(exclude).github/**"; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
            echo "[LOG] No changes outside .github between origin/main and ${UP_REF}."
          else
            echo "no_changes=false" >> "$GITHUB_OUTPUT"
            echo "[LOG] Changes detected (excluding .github)."
          fi

      # 在暫存工作分支 materialize 上游內容（不推 main；交由 CPR 建分支/PR）
      - name: Materialize upstream ref into workspace (keep local rules)
        if: steps.earlycheck.outputs.no_changes != 'true'
        shell: bash
        run: |
          set -euo pipefail
          UP_REF="${{ steps.resolve.outputs.up_ref }}"

          # 以 origin/main 為基底建立 staging 分支；**不動 main**。
          git switch -c sync-staging origin/main

          # 清理後用 archive 解壓上游內容（排除 .github）
          git rm -r -q --cached . || true
          git clean -fdqx || true

          echo "[LOG] Archive ${UP_REF} → extract (excluding .github)..."
          git archive --format=tar "${UP_REF}" \
            | tar -x -m --exclude=".github" --exclude="./.github"

          # 固定使用本地的重要規則檔（避免上游覆蓋）
          git checkout origin/main -- .gitattributes .gitignore README.md || true
          git add .gitattributes 2>/dev/null || true

          # 總是用本地 .github/（避免 workflow 被上游改掉）
          rm -rf .github || true
          git checkout origin/main -- .github || true

          # 套用屬性正規化（行尾等）
          git add --renormalize -A

          echo "[LOG] Staged summary (vs origin/main):"
          git --no-pager diff --cached --stat || true

      - name: Check for actual diff before PR
        id: diffcheck
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main
          git diff --quiet origin/main..HEAD || { echo "no_diff=false" >> "$GITHUB_OUTPUT"; exit 0; }
          echo "no_diff=true" >> "$GITHUB_OUTPUT"
          echo "[LOG] No real diff — skip PR."

      - name: Create / Update PR
        if: steps.diffcheck.outputs.no_diff == 'false'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: sync/upstream-dev            # PR 分支名稱（固定）
          base: main
          title: "Auto sync ${{ steps.resolve.outputs.up_ref }} → main"
          commit-message: "chore(sync): materialize ${{ steps.resolve.outputs.up_ref }} into main (via PR)"
          body: |
            Automated sync from **${{ steps.resolve.outputs.up_ref }}** to **main** (PR-only).
            - reason: `${{ steps.resolve.outputs.reason }}`
            - upstream tip: `${{ steps.resolve.outputs.upstream_tip }}`
            - origin tip:   `${{ steps.resolve.outputs.origin_tip }}`
            - ahead:  `${{ steps.resolve.outputs.ahead }}`
            - behind: `${{ steps.resolve.outputs.behind }}`
          labels: "chore,auto-sync"
          delete-branch: false
          # 這個 Action 會自動偵測變更、建分支、commit、push、開 PR。:contentReference[oaicite:2]{index=2}

      - name: Notify Discord (PR created/updated)
        if: steps.diffcheck.outputs.no_diff == 'false' && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          🔄 **Auto sync ${{ steps.resolve.outputs.up_ref }} → main** (${OP})
          PR: ${PR_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          ❌ **Auto sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
