name: Auto Rebase Upstream Dev (quiet PR-only)

on:
  schedule:
    - cron: "*/5 * * * *"   # GitHub Actions 最短 5 分鐘一次
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git setup
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream & fetch all
        run: |
          set -euo pipefail
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin   +refs/heads/*:refs/remotes/origin/*
          git fetch --prune upstream +refs/heads/*:refs/remotes/upstream/*

      - name: Resolve upstream ref & tip-diff (robust)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if git show-ref --verify --quiet refs/remotes/upstream/dev; then
            UP_REF="upstream/dev"
            REASON="found-branch-local"
          else
            UP_REF="origin/main"
            REASON="fallback-origin-main"
          fi
          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')
          {
            echo "up_ref=${UP_REF}"
            echo "reason=${REASON}"
            echo "upstream_tip=${UP_TIP}"
            echo "origin_tip=${ORI_TIP}"
            echo "ahead=${AHEAD}"
            echo "behind=${BEHIND}"
          } >> "$GITHUB_OUTPUT"
          echo "[LOG] reason=${REASON}  up_ref=${UP_REF}  up_tip=${UP_TIP}  base_tip=${ORI_TIP}"
          echo "[LOG] rev-list(origin/main...${UP_REF}) BEHIND=${BEHIND} AHEAD=${AHEAD}"

      - name: Early exit if tips identical (only if comparing upstream/dev)
        if: steps.resolve.outputs.ahead == '0' && steps.resolve.outputs.behind == '0' && startsWith(steps.resolve.outputs.up_ref, 'upstream/')
        run: echo "[LOG] Tips identical to upstream/dev; skip run."

      - name: Guard against silent fallback (origin/main...origin/main = 0/0)
        if: steps.resolve.outputs.ahead == '0' && steps.resolve.outputs.behind == '0' && !startsWith(steps.resolve.outputs.up_ref, 'upstream/')
        run: |
          echo "::error::UP_REF=${{ steps.resolve.outputs.up_ref }} equals origin/main (fallback). Refusing to skip silently."
          exit 2

      - name: Fetch existing PR branch (if any)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        id: prev
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune origin refs/heads/sync/upstream-dev:refs/remotes/origin/sync/upstream-dev || true
          PREV_TIP=""
          if git show origin/sync/upstream-dev:.sync/upstream-tip.txt >/dev/null 2>&1; then
            PREV_TIP=$(git show origin/sync/upstream-dev:.sync/upstream-tip.txt | sed -n 's/^upstream_tip=//p' | head -n1)
          fi
          echo "prev_tip=${PREV_TIP}" >> "$GITHUB_OUTPUT"
          echo "[LOG] previous recorded upstream_tip: ${PREV_TIP:-<none>}"

      # ---------- 這裡開始：rebase 你的補丁到上游之上 ----------
      - name: (Cache) Restore rerere decisions
        uses: actions/cache@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ runner.os }}-${{ github.repository }}-${{ steps.resolve.outputs.upstream_tip }}
          restore-keys: |
            rr-cache-${{ runner.os }}-${{ github.repository }}-

      - name: Rebase local commits (preserve patch stack; prefer our patches)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          UP_REF="${{ steps.resolve.outputs.up_ref }}"

          # 1) 以你目前 main 的狀態出發，開一條 rebase 分支
          git checkout -B main origin/main
          git switch -c rebase/upstream-dev

          # 2) 開啟 rerere，記住衝突解法（之後會 cache）
          git config rerere.enabled true

          # 3) rebase 到上游 tip：
          #    ⚠ 在 rebase 中，-X theirs = 優先採用你正在重放的「本地提交」內容
          if ! git rebase -s ort -X theirs "${UP_REF}"; then
            echo "::error::Rebase had conflicts that could not be auto-resolved."
            exit 1
          fi

          echo "[LOG] Rebased branch tip:"
          git --no-pager log --oneline -n 5

      - name: (Cache) Save rerere decisions
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        uses: actions/cache/save@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ runner.os }}-${{ github.repository }}-${{ steps.resolve.outputs.upstream_tip }}

      # 把 rebase 結果「投影」回 main 的 Index（PR 會從 Index 取變更）
      - name: Materialize rebased tree onto main (INDEX)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          git checkout -B main origin/main
          git rm -r -q --cached . || true
          git clean -fdqx || true
          # 用 rebase 結果覆蓋工作樹與 Index（不 commit）
          git restore --source rebase/upstream-dev --worktree --staged :/

          echo "[LOG] Staged diff (INDEX vs origin/main) after rebase:"
          git --no-pager diff --cached --stat origin/main | head -n 100 || true
      # ---------- 這裡結束：rebase 流程 ----------

      # 只在 .github 以外有實質差異時才進 CPR（低噪音）
      - name: Is there real diff outside .github? (INDEX)
        id: diffcheck
        shell: bash
        run: |
          set -euo pipefail
          git update-index -q --refresh
          if git diff --cached --quiet origin/main -- . ":(exclude).github" ":(exclude).github/**"; then
            echo "real_diff=false" >> "$GITHUB_OUTPUT"
            echo "[LOG] No real diff outside .github (INDEX vs origin/main)."
          else
            echo "real_diff=true"  >> "$GITHUB_OUTPUT"
            echo "[LOG] Real diff detected (INDEX vs origin/main)."
          fi

      # 若沒有實質差異但上游 tip 變了 → 只寫同步記錄避免每輪都動 PR
      - name: Write .sync meta only when needed (avoid churn)
        if: steps.diffcheck.outputs.real_diff == 'false'
        shell: bash
        run: |
          set -euo pipefail
          CUR="${{ steps.resolve.outputs.upstream_tip }}"
          PREV="${{ steps.prev.outputs.prev_tip }}"
          if [ "${CUR}" != "${PREV}" ] && [ -n "${CUR}" ]; then
            mkdir -p .sync
            {
              echo "up_ref=${{ steps.resolve.outputs.up_ref }}"
              echo "upstream_tip=${CUR}"
              echo "origin_tip=${{ steps.resolve.outputs.origin_tip }}"
              echo "generated_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            } > .sync/upstream-tip.txt
            git add .sync/upstream-tip.txt
            echo "[LOG] Wrote .sync/upstream-tip.txt (new upstream tip)."
          else
            echo "[LOG] Same upstream tip as existing PR branch; skip meta write."
          fi

      # 最終 gate：Index 對 origin/main 有差異才開/更 PR
      - name: Final diff gate (will we PR?) (INDEX)
        id: finalgate
        shell: bash
        run: |
          set -euo pipefail
          git update-index -q --refresh
          if git diff --cached --quiet origin/main ; then
            echo "will_pr=false" >> "$GITHUB_OUTPUT"
            echo "[LOG] Nothing to PR (INDEX vs origin/main)."
          else
            echo "will_pr=true"  >> "$GITHUB_OUTPUT"
            echo "[LOG] We will create/update PR (INDEX vs origin/main has changes)."
          fi

      - name: Create / Update PR (quiet)
        if: steps.finalgate.outputs.will_pr == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: sync/upstream-dev
          base: main
          title: "Auto rebase ${{ steps.resolve.outputs.up_ref }} → main (tip=${{ steps.resolve.outputs.upstream_tip }})"
          commit-message: "chore(sync): rebase onto ${{ steps.resolve.outputs.up_ref }}@${{ steps.resolve.outputs.upstream_tip }}"
          body: |
            Automated **rebase** from **${{ steps.resolve.outputs.up_ref }}** to **main** (quiet mode).
            - reason: `${{ steps.resolve.outputs.reason }}`
            - upstream tip: `${{ steps.resolve.outputs.upstream_tip }}`
            - origin tip:   `${{ steps.resolve.outputs.origin_tip }}`
            - ahead:  `${{ steps.resolve.outputs.ahead }}`
            - behind: `${{ steps.resolve.outputs.behind }}`
            - notes: Uses `git rebase -s ort -X theirs` to prefer our patches during rebase.
          labels: "chore,auto-sync"
          draft: true
          delete-branch: false

      - name: Notify Discord (only on actual CPR operation)
        if: steps.cpr.outputs.pull-request-operation && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          🔄 **Auto rebase ${{ steps.resolve.outputs.up_ref }} → main** (${OP})
          PR: ${PR_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          ❌ **Auto rebase failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
