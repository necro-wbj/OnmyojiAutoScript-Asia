name: Auto Rebase Upstream Dev

on:
  schedule:
    - cron: "*/5 * * * *"      # 每 5 分鐘
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git setup (identity & safety)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream and fetch
        run: |
          set -e
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin
          git fetch --prune upstream

      # 解析來源：有 upstream/dev 用它，否則回退到自己的 main
      - name: Resolve upstream ref (dev or origin/main)
        id: resolve
        shell: bash
        run: |
          set -e
          TARGET_BRANCH="dev"
          if git ls-remote --heads upstream "$TARGET_BRANCH" | grep -q "refs/heads/$TARGET_BRANCH"; then
            UP_REF="upstream/${TARGET_BRANCH}"
            REASON="found-branch"
          else
            UP_REF="origin/main"
            REASON="fallback-origin-main"
          fi

          git fetch --prune origin
          if [[ "$UP_REF" == upstream/* ]]; then git fetch --prune upstream; fi

          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')

          echo "up_ref=${UP_REF}"           >> $GITHUB_OUTPUT
          echo "reason=${REASON}"           >> $GITHUB_OUTPUT
          echo "upstream_tip=${UP_TIP}"     >> $GITHUB_OUTPUT
          echo "origin_tip=${ORI_TIP}"      >> $GITHUB_OUTPUT
          echo "ahead=${AHEAD}"             >> $GITHUB_OUTPUT
          echo "behind=${BEHIND}"           >> $GITHUB_OUTPUT

          echo "[LOG] Using upstream ref: ${UP_REF} (${REASON})"
          echo "[LOG] origin/main tip:  ${ORI_TIP}"
          echo "[LOG] ${UP_REF} tip:     ${UP_TIP}"
          echo "[LOG] AHEAD=${AHEAD}, BEHIND=${BEHIND}"

      - name: Exit early if no changes from upstream
        id: earlycheck
        shell: bash
        run: |
          set -e
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
          if git diff --quiet origin/main.."${UP_REF}"; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "[LOG] No changes detected between origin/main and ${UP_REF}. Exit for PR creation."
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "[LOG] Changes detected from ${UP_REF}. PR will be created/updated."
          fi

      # 用 archive 解壓覆寫工作樹（不 push，交給 CPR 建分支/PR）
      - name: Materialize upstream ref via archive (no push)
        if: steps.earlycheck.outputs.no_changes != 'true'
        shell: bash
        run: |
          set -e
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
      
          # ★ 關鍵：一定要停在 main（對應遠端 origin/main）
          git checkout -B main origin/main
      
          # 清空工作樹，避免殘檔
          git rm -r -q --cached . || true
          git clean -fdqx || true
      
          echo "[LOG] Archiving ${UP_REF} → extracting into working tree..."
          git archive --format=tar "${UP_REF}" | tar -x -m
      
          # 全量加入索引
          git add -A
      
          echo "[LOG] Staged summary (vs origin/main):"
          git --no-pager diff --cached --stat || true

      - name: Create / Update PR
        if: steps.earlycheck.outputs.no_changes != 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: sync/upstream-dev
          base: main
          title: >-
            Auto sync ${{ steps.resolve.outputs.up_ref }} → main
          commit-message: >-
            chore(sync): mirror ${{ steps.resolve.outputs.up_ref }} into main
          body: |
            Automated sync from **${{ steps.resolve.outputs.up_ref }}** to **main**.
            - upstream ref: `${{ steps.resolve.outputs.up_ref }}`
            - reason: `${{ steps.resolve.outputs.reason }}`  (found-branch / fallback-origin-main)
            - upstream tip: `${{ steps.resolve.outputs.upstream_tip }}`
            - origin tip:   `${{ steps.resolve.outputs.origin_tip }}`
            - ahead:  `${{ steps.resolve.outputs.ahead }}`
            - behind: `${{ steps.resolve.outputs.behind }}`
          labels: "chore,auto-sync"
          delete-branch: false

      # 有 PR → 貼 PR 連結
      - name: Notify Discord (PR created/updated)
        if: steps.earlycheck.outputs.no_changes != 'true' && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
        run: |
          set -e
          MSG=$(cat <<EOF
          🔄 **Auto sync ${{ steps.resolve.outputs.up_ref }} → main** (${OP})
          PR: ${PR_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      # 任一步驟失敗 → 貼 Run 連結
      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          MSG=$(cat <<EOF
          ❌ **Auto sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
