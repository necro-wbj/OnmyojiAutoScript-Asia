name: Auto Rebase Upstream Dev (quiet PR-only)

on:
  schedule:
    - cron: "*/5 * * * *"   # 最小間隔 5 分鐘
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # 抓全歷史，避免比較不準確
      - name: Git setup
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream & fetch all
        run: |
          set -euo pipefail
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin +refs/heads/*:refs/remotes/origin/*
          git fetch --prune upstream +refs/heads/*:refs/remotes/upstream/*

      # 解析來源 & 快速檢查 tip 是否變動（僅用於早退，不含 pathspec）
      - name: Resolve upstream ref & tip-diff
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          TARGET_BRANCH="dev"
          if git ls-remote --heads upstream "$TARGET_BRANCH" | grep -q "refs/heads/$TARGET_BRANCH"; then
            UP_REF="upstream/${TARGET_BRANCH}"
            REASON="found-branch"
          else
            UP_REF="origin/main"
            REASON="fallback-origin-main"
          fi
          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')

          {
            echo "up_ref=${UP_REF}"
            echo "reason=${REASON}"
            echo "upstream_tip=${UP_TIP}"
            echo "origin_tip=${ORI_TIP}"
            echo "ahead=${AHEAD}"
            echo "behind=${BEHIND}"
          } >> "$GITHUB_OUTPUT"

          echo "[LOG] ${REASON}  up_ref=${UP_REF}  up_tip=${UP_TIP}  base_tip=${ORI_TIP}"
          echo "[LOG] rev-list(origin/main...${UP_REF}) BEHIND=${BEHIND} AHEAD=${AHEAD}"

      # 早退 1：tips 完全相同 → 不做事
      - name: Early exit if tips identical
        if: steps.resolve.outputs.ahead == '0' && steps.resolve.outputs.behind == '0'
        run: echo "[LOG] Tips identical; skip run."

      # 取得既有 PR 分支（若有），讀取上次記錄的 upstream tip
      - name: Fetch existing PR branch (if any)
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        id: prev
        shell: bash
        run: |
          set -euo pipefail
          git fetch --prune origin refs/heads/sync/upstream-dev:refs/remotes/origin/sync/upstream-dev || true
          PREV_TIP=""
          if git show origin/sync/upstream-dev:.sync/upstream-tip.txt >/dev/null 2>&1; then
            PREV_TIP=$(git show origin/sync/upstream-dev:.sync/upstream-tip.txt | sed -n 's/^upstream_tip=//p' | head -n1)
          fi
          echo "prev_tip=${PREV_TIP}" >> "$GITHUB_OUTPUT"
          echo "[LOG] previous recorded upstream_tip: ${PREV_TIP:-<none>}"

      # Materialize：先把 upstream 展開到 staging 分支，再排除 .github 與固定本地檔
      - name: Materialize upstream into staging
        if: steps.resolve.outputs.ahead != '0' || steps.resolve.outputs.behind != '0'
        shell: bash
        run: |
          set -euo pipefail
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
          git switch -c sync-staging origin/main
          git rm -r -q --cached . || true
          git clean -fdqx || true
          git archive --format=tar "${UP_REF}" | tar -x -m --exclude=".github" --exclude="./.github"
          git checkout origin/main -- .gitattributes .gitignore README.md || true
          rm -rf .github || true
          git checkout origin/main -- .github || true
          git add --renormalize -A
          echo "[LOG] Staged diff (excluding .github):"
          git --no-pager diff --cached --stat || true

      # 判定 materialize 後是否還有「實質差異」
      - name: Is there real diff outside .github?
        id: diffcheck
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet origin/main..HEAD -- . ":(exclude).github" ":(exclude).github/**"; then
            echo "real_diff=false" >> "$GITHUB_OUTPUT"
            echo "[LOG] No real diff outside .github after materialize."
          else
            echo "real_diff=true"  >> "$GITHUB_OUTPUT"
            echo "[LOG] Real diff detected outside .github."
          fi

      # 僅當「沒有實質差異」但 upstream tip 變了且未曾記錄過 → 寫 .sync 記錄，避免重複更新
      - name: Write .sync meta only when needed (avoid churn)
        if: steps.diffcheck.outputs.real_diff == 'false'
        shell: bash
        run: |
          set -euo pipefail
          CUR="${{ steps.resolve.outputs.upstream_tip }}"
          PREV="${{ steps.prev.outputs.prev_tip }}"
          if [ "${CUR}" != "${PREV}" ] && [ -n "${CUR}" ]; then
            mkdir -p .sync
            {
              echo "up_ref=${{ steps.resolve.outputs.up_ref }}"
              echo "upstream_tip=${CUR}"
              echo "origin_tip=${{ steps.resolve.outputs.origin_tip }}"
              echo "generated_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            } > .sync/upstream-tip.txt
            git add .sync/upstream-tip.txt
            echo "[LOG] Wrote .sync/upstream-tip.txt (new upstream tip)."
          else
            echo "[LOG] Same upstream tip as existing PR branch; skip meta write."
          fi

      # 最終再看一次是否有差異（含 .sync 檔的可能新增）
      - name: Final diff gate (will we PR?)
        id: finalgate
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet origin/main..HEAD ; then
            echo "will_pr=false" >> "$GITHUB_OUTPUT"
            echo "[LOG] Nothing to PR."
          else
            echo "will_pr=true"  >> "$GITHUB_OUTPUT"
            echo "[LOG] We will create/update PR."
          fi

      - name: Create / Update PR (quiet)
        if: steps.finalgate.outputs.will_pr == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: sync/upstream-dev      # 固定分支 → 同一個 PR 會被更新，不會開很多個
          base: main
          title: "Auto sync ${{ steps.resolve.outputs.up_ref }} → main (tip=${{ steps.resolve.outputs.upstream_tip }})"
          commit-message: "chore(sync): ${{ steps.resolve.outputs.up_ref }}@${{ steps.resolve.outputs.upstream_tip }}"
          body: |
            Automated sync from **${{ steps.resolve.outputs.up_ref }}** to **main** (quiet mode).
            - reason: `${{ steps.resolve.outputs.reason }}`
            - upstream tip: `${{ steps.resolve.outputs.upstream_tip }}`
            - origin tip:   `${{ steps.resolve.outputs.origin_tip }}`
            - ahead:  `${{ steps.resolve.outputs.ahead }}`
            - behind: `${{ steps.resolve.outputs.behind }}`
            - note: PR updates only when upstream tip changes or real diff exists.
          labels: "chore,auto-sync"
          draft: true             # ← 減少通知（可改成 false）
          delete-branch: false
          # 預設行為：會持續更新既有 PR，而不是每次開新 PR。:contentReference[oaicite:3]{index=3}

      - name: Notify Discord (only on actual CPR operation)
        if: steps.cpr.outputs.pull-request-operation && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          🔄 **Auto sync ${{ steps.resolve.outputs.up_ref }} → main** (${OP})
          PR: ${PR_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
          curl -sS -X POST "$DISCORD_WEBHOOK" -H 'Content-Type: application/json' \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          MSG=$(cat <<EOF
          ❌ **Auto sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
             -d "$(jq -n --arg content "$MSG" '{content: $content}')"
