name: Auto Rebase Upstream Dev

on:
  schedule:
    - cron: "0 * * * *"      # 每 5 分鐘
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git setup (identity & safety)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream and fetch
        run: |
          set -e
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin
          git fetch --prune upstream

      # 解析來源：有 upstream/dev 用它，否則回退到自己的 main
      - name: Resolve upstream ref (dev or origin/main)
        id: resolve
        shell: bash
        run: |
          set -e
          TARGET_BRANCH="dev"
          if git ls-remote --heads upstream "$TARGET_BRANCH" | grep -q "refs/heads/$TARGET_BRANCH"; then
            UP_REF="upstream/${TARGET_BRANCH}"
            REASON="found-branch"
          else
            UP_REF="origin/main"
            REASON="fallback-origin-main"
          fi

          git fetch --prune origin
          if [[ "$UP_REF" == upstream/* ]]; then git fetch --prune upstream; fi

          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')

          echo "up_ref=${UP_REF}"           >> $GITHUB_OUTPUT
          echo "reason=${REASON}"           >> $GITHUB_OUTPUT
          echo "upstream_tip=${UP_TIP}"     >> $GITHUB_OUTPUT
          echo "origin_tip=${ORI_TIP}"      >> $GITHUB_OUTPUT
          echo "ahead=${AHEAD}"             >> $GITHUB_OUTPUT
          echo "behind=${BEHIND}"           >> $GITHUB_OUTPUT

          echo "[LOG] Using upstream ref: ${UP_REF} (${REASON})"
          echo "[LOG] origin/main tip:  ${ORI_TIP}"
          echo "[LOG] ${UP_REF} tip:     ${UP_TIP}"
          echo "[LOG] AHEAD=${AHEAD}, BEHIND=${BEHIND}"

      - name: Exit early if no changes from upstream
        id: earlycheck
        shell: bash
        run: |
          set -e
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
          # 忽略 .github/** 的差異（workflow 權限問題不影響是否開 PR）
          if git diff --quiet origin/main.."${UP_REF}" -- . ":(exclude).github" ":(exclude).github/**"; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "[LOG] No changes detected outside .github between origin/main and ${UP_REF}."
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "[LOG] Changes detected (excluding .github)."
          fi

      # 用 archive 解壓覆寫工作樹（不 push，交給 CPR 建分支/PR）
      - name: Materialize upstream ref via archive (preserve local rules)
        if: steps.earlycheck.outputs.no_changes != 'true'
        shell: bash
        run: |
          set -e
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
      
          # ★ 一定停在 main（CPR 會 reset 到 origin/main）
          git checkout -B main origin/main
      
          # === 0) 算 merge-base（用來判斷「雙方都有改」） ===
          BASE=$(git merge-base origin/main "${UP_REF}")
          echo "[LOG] merge-base: ${BASE}"
      
          # === 1) 清理工作樹 ===
          git rm -r -q --cached . || true
          git clean -fdqx || true
      
          # === 2) 展開上游檔案（排除 .github/**）===
          echo "[LOG] Archive ${UP_REF} → extract (excluding .github)..."
          git archive --format=tar "${UP_REF}" \
            | tar -x -m --exclude=".github" --exclude="./.github"
      
          # === 3) 固定使用「本地」的 .gitattributes / .gitignore / README.md ===
          git checkout origin/main -- .gitattributes .gitignore README.md || true
          # 先把 .gitattributes 放進索引，後續 renormalize 才會套規則
          git add .gitattributes 2>/dev/null || true
      
          # === 4) 計算雙方改動的檔案清單（相對 BASE）===
          mapfile -t LEFT  < <(git diff --name-only --diff-filter=ACMR "${BASE}..origin/main")
          mapfile -t RIGHT < <(git diff --name-only --diff-filter=ACMR "${BASE}..${UP_REF}")
          declare -A RIGHT_SET; for p in "${RIGHT[@]}"; do RIGHT_SET["$p"]=1; done
      
          # 4a) 永遠保留本地（你指定的三檔；已在上面 checkout 過，這裡只做說明輸出）
          PROTECT_ALWAYS=(".gitattributes" ".gitignore" "README.md")
          echo "[LOG] Always-keep-local: ${PROTECT_ALWAYS[*]}"
      
          # 4b) 僅在「雙方都有改」時保留本地的型別/目錄規則
          PROTECT_BOTH_GLOBS=("assets/**" "*.png" "*.jpg" "*.json" "*.yaml" "*.yml" "*.ini" "*.xml" "*.txt")
      
          keep_local=()
          for f in "${LEFT[@]}"; do
            [[ -z "${RIGHT_SET[$f]}" ]] && continue  # 上游沒改就跳過
            for g in "${PROTECT_BOTH_GLOBS[@]}"; do
              if [[ "$f" == $g ]]; then
                keep_local+=("$f")
                break
              fi
            done
          done
      
          if [[ ${#keep_local[@]} -gt 0 ]]; then
            echo "[LOG] Keep-local on both-changed (assets/JSON etc):"
            printf ' - %s\n' "${keep_local[@]}"
            git checkout origin/main -- "${keep_local[@]}" || true
          else
            echo "[LOG] No both-changed files matching keep-local globs."
          fi
      
          # === 5) 保證 .github/ 仍用本地 ===
          rm -rf .github || true
          git checkout origin/main -- .github || true
      
          # === 6) 全量加入；用 --renormalize 讓 .gitattributes 規則生效（EOL/文字屬性）===
          git add --renormalize -A
      
          echo "[LOG] Staged summary (vs origin/main):"
          git --no-pager diff --cached --stat || true

      - name: Check for actual diff before PR
        id: diffcheck
        shell: bash
        run: |
          git fetch origin main
          git diff --quiet origin/main..HEAD
          if [ $? -eq 0 ]; then
            echo "no_diff=true" >> $GITHUB_OUTPUT
            echo "[LOG] No real diff — skip PR."
          else
            echo "no_diff=false" >> $GITHUB_OUTPUT
            echo "[LOG] Detected diff — will create/update PR."
          fi
      
      - name: Create / Update PR
        if: steps.diffcheck.outputs.no_diff == 'false'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: sync/upstream-dev
          base: main
          title: >-
            Auto sync ${{ steps.resolve.outputs.up_ref }} → main
          commit-message: >-
            chore(sync): mirror ${{ steps.resolve.outputs.up_ref }} into main
          body: |
            Automated sync from **${{ steps.resolve.outputs.up_ref }}** to **main**.
            - upstream ref: `${{ steps.resolve.outputs.up_ref }}`
            - reason: `${{ steps.resolve.outputs.reason }}`  (found-branch / fallback-origin-main)
            - upstream tip: `${{ steps.resolve.outputs.upstream_tip }}`
            - origin tip:   `${{ steps.resolve.outputs.origin_tip }}`
            - ahead:  `${{ steps.resolve.outputs.ahead }}`
            - behind: `${{ steps.resolve.outputs.behind }}`
          labels: "chore,auto-sync"
          delete-branch: false

      # 有 PR → 貼 PR 連結
      - name: Notify Discord (PR created/updated)
        if: steps.diffcheck.outputs.no_diff == 'false' && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
        run: |
          set -e
          MSG=$(cat <<EOF
          🔄 **Auto sync ${{ steps.resolve.outputs.up_ref }} → main** (${OP})
          PR: ${PR_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      # 任一步驟失敗 → 貼 Run 連結
      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          MSG=$(cat <<EOF
          ❌ **Auto sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
