name: Auto sync from upstream/dev to main (overlay rebase)

on:
  schedule:
    - cron: "*/5 * * * *"   # 每 5 分鐘（UTC）
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: auto-rebase-upstream-dev
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      PR_BRANCH: auto-rebase/upstream-dev
      BASE_BRANCH: main
      UPSTREAM_TAG: refs/tags/auto-rebase/last-upstream-dev

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add upstream & fetch
        run: |
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git || true
          git fetch --all --prune --tags

      # === 取得 upstream tip 與本地標記的已處理 tip ===
      - name: Read upstream tip & processed tag
        id: tip
        run: |
          set -e
          USHA=$(git rev-parse upstream/dev)
          echo "upstream_sha=$USHA" >> $GITHUB_OUTPUT
          # 若 tag 不存在則輸出空字串
          PSHA=$(git rev-parse "${UPSTREAM_TAG}" 2>/dev/null || true)
          echo "processed_sha=$PSHA" >> $GITHUB_OUTPUT
          echo "Upstream: $USHA"
          echo "Processed(tag): ${PSHA:-<none>}"

      # === 絕對早退：如果 tag 指向與 upstream/dev 一樣，直接離開 ===
      - name: Skip (already processed this upstream tip)
        if: steps.tip.outputs.processed_sha == steps.tip.outputs.upstream_sha
        run: |
          echo "Already processed this upstream/dev tip; exiting."
          exit 0

      # === Git 設定（rerere / merge drivers / 身分 / safe dir）===
      - name: Git config
        run: |
          git config rerere.enabled true
          git config rerere.autoupdate true
          git config merge.ours.driver true
          git config merge.theirs.driver true
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Restore rerere cache
        uses: actions/cache@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ github.ref_name }}
          restore-keys: |
            rr-cache-

      # === 以 upstream/dev 為基底建立工作分支 ===
      - name: Prepare working branch from upstream/dev
        run: |
          git switch -C "$PR_BRANCH" upstream/dev

      # === 套用 overlay 提交（路徑過濾＋區分：正常/衝突/空補丁） ===
      - name: Cherry-pick overlay commit(s) from main
        run: |
          COMMITS=$(git log --reverse --format=%H upstream/dev..origin/${BASE_BRANCH})
          if [ -z "$COMMITS" ]; then
            echo "NO_OVERLAY=1" >> $GITHUB_ENV
            exit 0
          fi

          ALLOW_PATTERNS='^(src/|tasks/|assets/|i18n/|scripts/|config/)'

          set -e
          for c in $COMMITS; do
            echo "::group::Cherry-picking $c"
            FILES=$(git diff --name-only ${c}^! || true)

            # 只動 CI/文件 且 未碰允許目錄 → 略過
            if echo "$FILES" | grep -Ev "$ALLOW_PATTERNS" | grep -Eq '(^|/)\.github/|(^|/)docs/|^README|^CHANGELOG'; then
              if ! echo "$FILES" | grep -Eq "$ALLOW_PATTERNS"; then
                echo "Skip CI/docs-only commit $c"
                echo "::endgroup::"
                continue
              fi
            fi

            if git cherry-pick -x $c; then
              echo "Applied $c"
              echo "::endgroup::"
              continue
            fi

            if git ls-files -u | grep -q . ; then
              echo "Detected real conflicts while applying $c"
              echo "CONFLICT=1" >> $GITHUB_ENV
              echo "::endgroup::"
              break
            else
              echo "Empty/Already-applied commit $c -> skip"
              git cherry-pick --skip || true
              echo "::endgroup::"
            fi
          done

      - name: Save rerere cache (even on conflict)
        if: always()
        uses: actions/cache@v4
        with:
          path: .git/rr-cache
          key: rr-cache-${{ github.ref_name }}

      # === 測試（可接入） ===
      - name: Run tests
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        run: |
          echo "Run your tests here"
          # pytest -q || true

      # === 記錄 push 前的 PR 分支 HEAD，用於判斷是否真的有更新 ===
      - name: Read remote PR branch before push
        id: beforepush
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        run: |
          PREV=$(git ls-remote --heads origin "$PR_BRANCH" | awk '{print $1}')
          echo "prev=${PREV:-none}" >> $GITHUB_OUTPUT
          echo "Prev remote head: ${PREV:-<none>}"

      # === push 分支（若已存在則更新） ===
      - name: Push branch
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        run: |
          git push -u origin "$PR_BRANCH" --force-with-lease

      # === 開或更新 PR（REST API） ===
      - name: Open or update PR (REST)
        id: pr
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1'
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          OWNER="${REPO%/*}"
          NEW=$(git rev-parse HEAD)

          # 有沒有真的更新：比較 push 前後
          if [ "${{ steps.beforepush.outputs.prev }}" = "$NEW" ]; then
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

          EXISTING=$(curl -sS -H "Authorization: Bearer $TOKEN" \
            "https://api.github.com/repos/$REPO/pulls?state=open&base=${BASE_BRANCH}&head=${OWNER}:${PR_BRANCH}" \
            | jq -r '.[0].html_url // empty')

          if [ -n "$EXISTING" ]; then
            echo "url=$EXISTING" >> $GITHUB_OUTPUT
            echo "Found existing PR: $EXISTING"
          else
            DATA=$(jq -n --arg title "chore: Rebase overlay onto latest upstream/dev" \
                        --arg head  "$PR_BRANCH" \
                        --arg base  "$BASE_BRANCH" \
                        --arg body  "自動將 \`${BASE_BRANCH}\` 的 overlay 提交套到最新 \`upstream/dev\`。\n- 使用 .gitattributes & rerere 降低衝突\n- 測試通過即可合併" \
                        '{title:$title, head:$head, base:$base, body:$body}')
            CREATED=$(curl -sS -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
              -d "$DATA" "https://api.github.com/repos/$REPO/pulls")
            URL=$(echo "$CREATED" | jq -r '.html_url // empty')
            [ -z "$URL" ] && { echo "$CREATED"; echo "Failed to create PR via REST" >&2; exit 1; }
            echo "url=$URL" >> $GITHUB_OUTPUT
            echo "Created PR: $URL"
          fi

      # === 成功：只有「真的有更新」時才發通知 ===
      - name: Discord notify success
        if: env.CONFLICT != '1' && env.NO_OVERLAY != '1' && steps.pr.outputs.updated == 'true'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PR_URL="${{ steps.pr.outputs.url }}"
          MSG="✅ Auto rebase 成功（本次有實際更新）！\nPR：${PR_URL}\nRun：${RUN_URL}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":\"$MSG\"}" \
               "https://discord.com/api/webhooks/1412622397592305814/dfHIMMiqayaA55ODa2cznyI0enNc2qhpSkG2Hvauvs3gwq0jnSL2osOQaj2kbBBXysiw"

      # === 衝突：發通知 ===
      - name: Discord notify conflict
        if: env.CONFLICT == '1'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          FILES=$(git ls-files -u | cut -f2 | sort -u | tr '\n' ' ')
          MSG="⚠️ Auto rebase 衝突，需要人工處理。\n衝突檔案: $FILES\nRun：${RUN_URL}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":\"$MSG\"}" \
               "https://discord.com/api/webhooks/1412622397592305814/dfHIMMiqayaA55ODa2cznyI0enNc2qhpSkG2Hvauvs3gwq0jnSL2osOQaj2kbBBXysiw"

      # === 成功時：更新 Tag 為本次處理的 upstream tip（讓下次能立即早退） ===
      - name: Update processed tag
        if: env.CONFLICT != '1'
        run: |
          git tag -f "${UPSTREAM_TAG#refs/tags/}" "${{ steps.tip.outputs.upstream_sha }}"
          git push origin "refs/tags/${UPSTREAM_TAG#refs/tags/}" --force
