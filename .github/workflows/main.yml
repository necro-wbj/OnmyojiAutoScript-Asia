name: Auto Rebase Upstream Dev

on:
  schedule:
    - cron: "0 * * * *"      # 每 5 分鐘
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git setup (identity & safety)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config core.autocrlf false

      - name: Add upstream and fetch
        run: |
          set -e
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/runhey/OnmyojiAutoScript.git
          git fetch --prune origin
          git fetch --prune upstream

      # 解析來源：有 upstream/dev 用它，否則回退到自己的 main
      - name: Resolve upstream ref (dev or origin/main)
        id: resolve
        shell: bash
        run: |
          set -e
          TARGET_BRANCH="dev"
          if git ls-remote --heads upstream "$TARGET_BRANCH" | grep -q "refs/heads/$TARGET_BRANCH"; then
            UP_REF="upstream/${TARGET_BRANCH}"
            REASON="found-branch"
          else
            UP_REF="origin/main"
            REASON="fallback-origin-main"
          fi

          git fetch --prune origin
          if [[ "$UP_REF" == upstream/* ]]; then git fetch --prune upstream; fi

          UP_TIP=$(git rev-parse --short "${UP_REF}")
          ORI_TIP=$(git rev-parse --short origin/main)
          read BEHIND AHEAD < <(git rev-list --left-right --count origin/main..."${UP_REF}" | awk '{print $1" "$2}')

          echo "up_ref=${UP_REF}"           >> $GITHUB_OUTPUT
          echo "reason=${REASON}"           >> $GITHUB_OUTPUT
          echo "upstream_tip=${UP_TIP}"     >> $GITHUB_OUTPUT
          echo "origin_tip=${ORI_TIP}"      >> $GITHUB_OUTPUT
          echo "ahead=${AHEAD}"             >> $GITHUB_OUTPUT
          echo "behind=${BEHIND}"           >> $GITHUB_OUTPUT

          echo "[LOG] Using upstream ref: ${UP_REF} (${REASON})"
          echo "[LOG] origin/main tip:  ${ORI_TIP}"
          echo "[LOG] ${UP_REF} tip:     ${UP_TIP}"
          echo "[LOG] AHEAD=${AHEAD}, BEHIND=${BEHIND}"

      - name: Exit early if no changes from upstream
        id: earlycheck
        shell: bash
        run: |
          set -e
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
          if git diff --quiet origin/main.."${UP_REF}"; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "[LOG] No changes detected between origin/main and ${UP_REF}. Exit for PR creation."
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "[LOG] Changes detected from ${UP_REF}. PR will be created/updated."
          fi

      # 用 archive 解壓覆寫工作樹（不 push，交給 CPR 建分支/PR）
      - name: Materialize upstream ref via archive (no push; keep local on both-changed)
        if: steps.earlycheck.outputs.no_changes != 'true'
        shell: bash
        run: |
          set -e
          UP_REF="${{ steps.resolve.outputs.up_ref }}"
      
          # ★ 一定停在 main（CPR 會 reset 到 origin/main）
          git checkout -B main origin/main
      
          # 0) 算 merge-base（用來判斷雙方是否都有改）
          BASE=$(git merge-base origin/main "${UP_REF}")
          echo "[LOG] merge-base: ${BASE}"
      
          # 1) 乾淨工作樹
          git rm -r -q --cached . || true
          git clean -fdqx || true
      
          # 2) 將上游內容展開到工作樹（排除 .github，避免 workflows 權限問題）
          echo "[LOG] Archiving ${UP_REF} → extracting (excluding .github)..."
          git archive --format=tar "${UP_REF}" | tar -x -m --exclude=".github" --exclude="./.github"
      
          # 3) 固定用本地（origin/main）的 .gitattributes（讓 eol/屬性在 add 時生效）
          #    也把 .github 還原成本地（避免同步上游 workflows）
          git checkout origin/main -- .gitattributes .github || true
      
          # 4) 計算「雙方都有改」的檔案集合（相對 merge-base）
          #    left = 本地改動 (BASE..origin/main)，right = 上游改動 (BASE..UP_REF)
          #    我們只關心特定清單/型別，兩邊都有改才保留本地。
          mapfile -t LEFT < <(git diff --name-only --diff-filter=ACMR "${BASE}..origin/main")
          mapfile -t RIGHT < <(git diff --name-only --diff-filter=ACMR "${BASE}..${UP_REF}")
      
          # 你要「雙方都有改時保留本地」的清單（可自行增修）
          PROTECT_LIST=(
            ".gitattributes"
            ".gitignore"
            "README.md"
          )
          # 型別/目錄規則（glob），雙方都有改才保留本地
          PROTECT_GLOBS=(
            "assets/**"
            "*.png"
            "*.jpg"
            "*.json"
            "*.yaml"
            "*.yml"
            "*.ini"
            "*.xml"
            "*.txt"
          )
      
          # 建立 right 的查表，加速比對
          declare -A RIGHT_SET
          for p in "${RIGHT[@]}"; do RIGHT_SET["$p"]=1; done
      
          keep_local=()
      
          # 先處理明確檔名
          for p in "${PROTECT_LIST[@]}"; do
            # 若此檔兩邊都有改，保留本地
            if printf '%s\n' "${LEFT[@]}" | grep -Fxq "$p" && [[ -n "${RIGHT_SET[$p]}" ]]; then
              keep_local+=("$p")
            fi
          done
      
          # 再處理型別/目錄規則（用 bash 的 [[ $f == glob ]]）
          for f in "${LEFT[@]}"; do
            [[ -z "${RIGHT_SET[$f]}" ]] && continue  # 右側無改動就跳過
            for g in "${PROTECT_GLOBS[@]}"; do
              if [[ "$f" == $g ]]; then
                keep_local+=("$f")
                break
              fi
            done
          done
      
          # 5) 對於需要保留本地的檔案，把剛才解出的上游版本覆蓋回「本地版本」
          #    也就是從 origin/main 還原這些檔案
          if [[ ${#keep_local[@]} -gt 0 ]]; then
            echo "[LOG] Keep-local (both changed) files:"
            printf ' - %s\n' "${keep_local[@]}"
            git checkout origin/main -- "${keep_local[@]}" || true
          else
            echo "[LOG] Keep-local set is empty."
          fi
      
          # 6) 全量加入索引（.gitattributes 已是本地版，此時 EOL/文本屬性生效）
          git add -A
      
          echo "[LOG] Staged summary (vs origin/main):"
          git --no-pager diff --cached --stat || true



      - name: Create / Update PR
        if: steps.earlycheck.outputs.no_changes != 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: sync/upstream-dev
          base: main
          title: >-
            Auto sync ${{ steps.resolve.outputs.up_ref }} → main
          commit-message: >-
            chore(sync): mirror ${{ steps.resolve.outputs.up_ref }} into main
          body: |
            Automated sync from **${{ steps.resolve.outputs.up_ref }}** to **main**.
            - upstream ref: `${{ steps.resolve.outputs.up_ref }}`
            - reason: `${{ steps.resolve.outputs.reason }}`  (found-branch / fallback-origin-main)
            - upstream tip: `${{ steps.resolve.outputs.upstream_tip }}`
            - origin tip:   `${{ steps.resolve.outputs.origin_tip }}`
            - ahead:  `${{ steps.resolve.outputs.ahead }}`
            - behind: `${{ steps.resolve.outputs.behind }}`
          labels: "chore,auto-sync"
          delete-branch: false

      # 有 PR → 貼 PR 連結
      - name: Notify Discord (PR created/updated)
        if: steps.earlycheck.outputs.no_changes != 'true' && steps.cpr.outputs.pull-request-operation != 'none'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
          OP: ${{ steps.cpr.outputs.pull-request-operation }}
        run: |
          set -e
          MSG=$(cat <<EOF
          🔄 **Auto sync ${{ steps.resolve.outputs.up_ref }} → main** (${OP})
          PR: ${PR_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"

      # 任一步驟失敗 → 貼 Run 連結
      - name: Notify Discord (run failed)
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          MSG=$(cat <<EOF
          ❌ **Auto sync failed**
          Run: ${RUN_URL}
          EOF
          )
          curl -sS -X POST "$DISCORD_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "$(jq -n --arg content "$MSG" '{content: $content}')"
